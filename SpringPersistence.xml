<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
              xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/tx 
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"> 

    <!-- Bean definitions go here -->
    
    <bean id="recordDao" class="com.sg.heroku.webportal.dao.RecordDaoMemImpl"/>
    
  
    
    
    <!-- If you register a free MySQL addon - you can uncomment the below to persist to a mysql db -->
<!--     #1 Use annotation-driven transactions 
    <tx:annotation-driven />
    
     #2 Define Data Source 
    <bean id="dataSourceBean" class="org.apache.commons.dbcp2.BasicDataSource">
         the next part describes your database location, and login info! 
        
         
            usually once you configre a heroku db addon you get a huge long db string in your config variables for your app.
            JAWSDB_URL = mysql://blahblahblahblah:zomgzomgzomgzomg@bunchastuff.morestuff.us-east-1.rds.amazonaws.com:3306/evenmorestuff
            
            Turn that into 3 separate config variables:
            DB_URL = mysql://bunchastuff.morestuff.us-east-1.rds.amazonaws.com:3306/evenmorestuff
            DB_USR = blahblahblahblah
            DB_PWD = zomgzomgzomgzomg
            
            Once you do that, the Spring config should pull them in as variables below, and do some setter injection on your dao.
            This is of course assuming you've already connected to the above and created the right tables for your dao to work against!
        

        <property name="url" value="jdbc:${DB_URL}" />
        <property name="username" value="${DB_USR}" />
        <property name="password" value="${DB_PWD}" />
         this describes WHAT KIND of db you're connecting too 
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
         define the basics of the connection pool 
        <property name="initialSize" value="5" />  this describes our db cxn pool size 
        <property name="maxTotal" value="20" />  so does this 
    </bean>
    
     #3 Define Transaction Manager 
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceBean" />
    </bean>
    
     #4 defining jdbcTemplate 
    <bean id="jdbcTemplateBean" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSourceBean" />
    </bean>
    
    <bean id="daoBean" class="com.sg.heroku.webportal.dao.RecordDaoMySQLImpl">
        <property name="jdbcTemplate" ref="jdbcTemplateBean" />
    </bean>-->
    
    
</beans>